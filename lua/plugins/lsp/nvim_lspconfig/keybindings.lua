require('which-key').add({
  { "<Tab>t", ":VtsExec goto_project_config<cr>", desc = "Go to tsconfig", mode = "n" },
  { "sli", ":VtsExec add_missing_imports<cr>", desc = "Import all", mode = "n" },
  { "slu", ":VtsExec remove_unused_imports<cr>", desc = "Import all", mode = "n" },
  -- { "slf", ":VtsExec fix_all<cr>", desc = "Import all", mode = "n" },
  { "sle", ":VtsExec file_references<cr>", desc = "Import all", mode = "n" },
  { "gd", ":VtsExec goto_source_definition<cr>", desc = "Import all", mode = "n" },
  { "slh", ":lua vim.lsp.buf.hover()<cr>", desc = "Show Node Information", mode = "n" },
  { "sld", ":lua vim.lsp.buf.definition()<cr>", desc = "Go to Definition", mode = "n" },
  -- { "sldD", ":lua vim.lsp.buf.declaration()<cr>", desc = "Go to Declaration", mode = "n" },
  { "slt", ":lua vim.lsp.buf.type_definition()<cr>", desc = "Go to Type Definition", mode = "n" },
  -- { "slm", ":lua vim.lsp.buf.implementation()<cr>", desc = "Go to Implementation", mode = "n" },
  -- { "sle", ":EslintFixAll<cr>", desc = "Eslint Fix", mode = "n" },
  { "slf", ":lua vim.lsp.buf.format()<cr>", desc = "Show Formatting Popup", mode = "n" },
  -- { "sl1", ":EslintFixAll<cr>", desc = "ESLint Formatting", mode = "n" },
  -- { "sl2", ":lua vim.lsp.buf.format()<cr>tsserver", desc = "TSServer Formatting", mode = "n" },
  -- { "sl3", ":lua vim.lsp.buf.format()<cr>diagnosticls", desc = "Diagnostic-LS Formatting", mode = "n" },
  -- { "sl4", ":lua vim.lsp.buf.format()<cr>null-ls", desc = "Null-LS Formatting", mode = "n" },
  -- { "sl<tab>", ":lua vim.diagnostic.open_float(0, {scope=\"line\"})<cr>", desc = "Show Diagnostic Popup", mode = "n" },
  -- { "sls", ":lua vim.lsp.buf.signature_help()<cr>", desc = "Show Signature Help", mode = "n" },
  -- { "sl]", ":lua require\"illuminate\".next_reference{wrap=true}<cr><cr>", desc = "Next Highlighted Reference", mode = "n" },
  -- { "sl[", ":lua require\"illuminate\".next_reference{reverse=true,wrap=true}<cr><cr>", desc = "Previous Highlighted Reference", mode = "n" },
})
  
require('which-key').add({
  -- { "<C-l>o", ":TypescriptOrganizeImports<cr>", desc = "Organize Imports", mode = "n" },
  -- { "<C-l>r", ":lua vim.lsp.buf.rename()<cr>", desc = "Rename Selection Under Cursor", mode = "n" },
  -- { "<C-l>R", ":TypescriptRenameFile<cr>", desc = "Rename File", mode = "n" },
  -- { "<C-l>I", ":TypescriptAddMissingImports<cr>", desc = "Import All", mode = "n" },
  -- { "<C-l>A", ":lua vim.lsp.buf.code_action()<cr>", desc = "Show Code Actions List", mode = "n" },
  -- { "<C-l>f", ":lua vim.lsp.buf.formatting()<cr>", desc = "Show Formatting Popup", mode = "n" },
  -- { "<C-l>1", ":lua vim.lsp.buf.formatting()<cr>eslint", desc = "ESLint Formatting", mode = "n" },
  -- { "<C-l>2", ":lua vim.lsp.buf.formatting()<cr>tsserver", desc = "TSServer Formatting", mode = "n" },
  -- { "<C-l>3", ":lua vim.lsp.buf.formatting()<cr>diagnosticls", desc = "Diagnostic-LS Formatting", mode = "n" },
  -- { "<C-l>4", ":lua vim.lsp.buf.formatting()<cr>null-ls", desc = "Null-LS Formatting", mode = "n" },
  -- { "<C-l>h", ":lua vim.lsp.buf.hover()<cr>", desc = "Show Definition Preview Popup", mode = "n" },
  -- { "<C-l>d", ":lua vim.lsp.buf.type_definition()<cr>", desc = "Show Type Definition Popup", mode = "n" },
  -- { "<C-l>i", ":lua vim.lsp.buf.implementation()<cr>", desc = "Show Implementation Popup", mode = "n" },
  -- { "<C-l>s", ":lua vim.lsp.buf.signature_help()<cr>", desc = "Show Signature Help", mode = "n" },
  -- { "<C-l><tab>", ":lua vim.diagnostic.open_float(0, {scope=\"line\"})<cr>", desc = "Show Diagnostic Popup", mode = "n" },
  -- { "<C-l>(", ":lua vim.diagnostic.goto_prev({ float = false })<cr>", desc = "Go to Previous Diagnostic Line", mode = "n" },
  -- { "<C-l>)", ":lua vim.diagnostic.goto_next({ float = false })<cr>", desc = "Go to Next Diagnostic Line", mode = "n" },
  -- { "<C-l>l", ":lua vim.lsp.codelens.run()<cr>", desc = "Show CodeLens Popup", mode = "n" },
  -- { "<C-l>]", ":lua require\"illuminate\".next_reference{wrap=true}<cr><cr>", desc = "Next Highlighted Reference", mode = "n" },
  -- { "<C-l>[", ":lua require\"illuminate\".next_reference{reverse=true,wrap=true}<cr><cr>", desc = "Previous Highlighted Reference", mode = "n" },
  -- { "<C-l>wa", ":lua vim.lsp.buf.add_workspace_folder()<cr>", desc = "Add New Workspace Folder", mode = "n" },
  -- { "<C-l>wr", ":lua vim.lsp.buf.remove_workspace_folder()<cr>", desc = "Remove Workspace Folder", mode = "n" },
  -- { "<C-l>ww", ":lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<cr>", desc = "List Workspace Folders", mode = "n" },
  -- { "<C-l>co", ":lua vim.lsp.buf.outgoing_calls()<cr>", desc = "Show Outgoing Calls", mode = "n" },
  -- { "<C-l>ci", ":lua vim.lsp.buf.incoming_calls()<cr>", desc = "Show Incoming Calls", mode = "n" },
})

